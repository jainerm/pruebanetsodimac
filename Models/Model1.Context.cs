//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace pruebasodimac.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CAR_CENTEREntities1 : DbContext
    {
        public CAR_CENTEREntities1()
            : base("name=CAR_CENTEREntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<cliente> cliente { get; set; }
        public virtual DbSet<documento> documento { get; set; }
        public virtual DbSet<factura> factura { get; set; }
        public virtual DbSet<mecanico> mecanico { get; set; }
        public virtual DbSet<repuestos> repuestos { get; set; }
        public virtual DbSet<servicios> servicios { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<mantenimiento> mantenimiento { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spActulizarCliente(Nullable<int> id_doc, Nullable<int> tipo_doc, string num_doc, string pri_nombre, string seg_nombre, string pri_apellido, string seg_apellido, string correo, string celular, string direccion, Nullable<int> id_servicio, Nullable<decimal> presupuesto, ObjectParameter cMensaje)
        {
            var id_docParameter = id_doc.HasValue ?
                new ObjectParameter("id_doc", id_doc) :
                new ObjectParameter("id_doc", typeof(int));
    
            var tipo_docParameter = tipo_doc.HasValue ?
                new ObjectParameter("tipo_doc", tipo_doc) :
                new ObjectParameter("tipo_doc", typeof(int));
    
            var num_docParameter = num_doc != null ?
                new ObjectParameter("num_doc", num_doc) :
                new ObjectParameter("num_doc", typeof(string));
    
            var pri_nombreParameter = pri_nombre != null ?
                new ObjectParameter("pri_nombre", pri_nombre) :
                new ObjectParameter("pri_nombre", typeof(string));
    
            var seg_nombreParameter = seg_nombre != null ?
                new ObjectParameter("seg_nombre", seg_nombre) :
                new ObjectParameter("seg_nombre", typeof(string));
    
            var pri_apellidoParameter = pri_apellido != null ?
                new ObjectParameter("pri_apellido", pri_apellido) :
                new ObjectParameter("pri_apellido", typeof(string));
    
            var seg_apellidoParameter = seg_apellido != null ?
                new ObjectParameter("seg_apellido", seg_apellido) :
                new ObjectParameter("seg_apellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("celular", celular) :
                new ObjectParameter("celular", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var id_servicioParameter = id_servicio.HasValue ?
                new ObjectParameter("id_servicio", id_servicio) :
                new ObjectParameter("id_servicio", typeof(int));
    
            var presupuestoParameter = presupuesto.HasValue ?
                new ObjectParameter("presupuesto", presupuesto) :
                new ObjectParameter("presupuesto", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActulizarCliente", id_docParameter, tipo_docParameter, num_docParameter, pri_nombreParameter, seg_nombreParameter, pri_apellidoParameter, seg_apellidoParameter, correoParameter, celularParameter, direccionParameter, id_servicioParameter, presupuestoParameter, cMensaje);
        }
    
        public virtual int spBorrarCliente(string num_doc, ObjectParameter cMensaje)
        {
            var num_docParameter = num_doc != null ?
                new ObjectParameter("num_doc", num_doc) :
                new ObjectParameter("num_doc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBorrarCliente", num_docParameter, cMensaje);
        }
    
        public virtual int spInsertarCliente(string tipo_doc, string num_doc, string pri_nombre, string seg_nombre, string pri_apellido, string seg_apellido, string correo, string celular, string direccion, string cod_servicio, Nullable<decimal> presupuesto)
        {
            var tipo_docParameter = tipo_doc != null ?
                new ObjectParameter("tipo_doc", tipo_doc) :
                new ObjectParameter("tipo_doc", typeof(string));
    
            var num_docParameter = num_doc != null ?
                new ObjectParameter("num_doc", num_doc) :
                new ObjectParameter("num_doc", typeof(string));
    
            var pri_nombreParameter = pri_nombre != null ?
                new ObjectParameter("pri_nombre", pri_nombre) :
                new ObjectParameter("pri_nombre", typeof(string));
    
            var seg_nombreParameter = seg_nombre != null ?
                new ObjectParameter("seg_nombre", seg_nombre) :
                new ObjectParameter("seg_nombre", typeof(string));
    
            var pri_apellidoParameter = pri_apellido != null ?
                new ObjectParameter("pri_apellido", pri_apellido) :
                new ObjectParameter("pri_apellido", typeof(string));
    
            var seg_apellidoParameter = seg_apellido != null ?
                new ObjectParameter("seg_apellido", seg_apellido) :
                new ObjectParameter("seg_apellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("celular", celular) :
                new ObjectParameter("celular", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var cod_servicioParameter = cod_servicio != null ?
                new ObjectParameter("cod_servicio", cod_servicio) :
                new ObjectParameter("cod_servicio", typeof(string));
    
            var presupuestoParameter = presupuesto.HasValue ?
                new ObjectParameter("presupuesto", presupuesto) :
                new ObjectParameter("presupuesto", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarCliente", tipo_docParameter, num_docParameter, pri_nombreParameter, seg_nombreParameter, pri_apellidoParameter, seg_apellidoParameter, correoParameter, celularParameter, direccionParameter, cod_servicioParameter, presupuestoParameter);
        }
    }
}
